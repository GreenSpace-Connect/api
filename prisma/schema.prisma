// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int         @id @default(autoincrement())
  fullname    String
  email       String      @unique
  password    String
  phoneNumber String?     @db.VarChar(15)
  photo       String?
  roleId      Int
  Role        Role        @relation(fields: [roleId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?
  community   Community[]
  member      Member[]
}

model Role {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  user      User[]
}

model Province {
  id         Int          @id @default(autoincrement())
  name       String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  deletedAt  DateTime?
  city       City[]
  greenPlace GreenPlace[]
  event      Event[]
}

model City {
  id         Int          @id @default(autoincrement())
  name       String
  provinceId Int
  province   Province     @relation(fields: [provinceId], references: [id])
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  deletedAt  DateTime?
  districts  District[]
  greenPlace GreenPlace[]
  event      Event[]
}

model District {
  id         Int          @id @default(autoincrement())
  name       String
  cityId     Int
  city       City         @relation(fields: [cityId], references: [id])
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  deletedAt  DateTime?
  greenPlace GreenPlace[]
  event      Event[]
}

model Community {
  id              Int               @id @default(autoincrement())
  name            String
  picId           Int
  pic             User              @relation(fields: [picId], references: [id])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
  communityMember CommunityMember[]
  basecamp        Basecamp[]
  event           Event[]
}

model Member {
  id              Int               @id @default(autoincrement())
  userId          Int
  user            User              @relation(fields: [userId], references: [id])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
  communityMember CommunityMember[]
}

model CommunityMember {
  id          Int       @id @default(autoincrement())
  memberId    Int
  member      Member    @relation(fields: [memberId], references: [id])
  communityId Int
  community   Community @relation(fields: [communityId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model GreenPlace {
  id         Int       @id @default(autoincrement())
  name       String
  provinceId Int
  province   Province  @relation(fields: [provinceId], references: [id])
  cityId     Int
  city       City      @relation(fields: [cityId], references: [id])
  districtId Int
  district   District  @relation(fields: [districtId], references: [id])
  address    String
  latitude   String
  longitude  String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
}

model Basecamp {
  id          Int       @id @default(autoincrement())
  communityId Int
  community   Community @relation(fields: [communityId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model Event {
  id          Int       @id @default(autoincrement())
  name        String
  description String    @db.Text
  thumbnail   String
  communityId Int
  community   Community @relation(fields: [communityId], references: [id])
  provinceId  Int
  province    Province  @relation(fields: [provinceId], references: [id])
  cityId      Int
  city        City      @relation(fields: [cityId], references: [id])
  districtId  Int
  district    District  @relation(fields: [districtId], references: [id])
  address     String
  latitude    String
  longitude   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  ticket      Ticket[]
}

model Ticket {
  id        Int       @id @default(autoincrement())
  name      String
  price     Float
  eventId   Int
  event     Event     @relation(fields: [eventId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}
