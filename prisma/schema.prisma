// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  fullname      String
  email         String          @unique
  password      String
  phoneNumber   String?         @db.VarChar(15)
  photo         String?
  roleId        Int
  role          Role            @relation(fields: [roleId], references: [id])
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  deletedAt     DateTime?
  community     Community[]
  CommunityUser CommunityUser[]
  Comment       Comment[]
  Complaint     Complaint[]
}

model Role {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  user      User[]
}

model Province {
  id         Int          @id @default(autoincrement())
  name       String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  deletedAt  DateTime?
  city       City[]
  greenPlace GreenPlace[]
  event      Event[]
}

model City {
  id         Int          @id @default(autoincrement())
  name       String
  provinceId Int
  province   Province     @relation(fields: [provinceId], references: [id])
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  deletedAt  DateTime?
  districts  District[]
  greenPlace GreenPlace[]
  event      Event[]
}

model District {
  id         Int          @id @default(autoincrement())
  name       String
  cityId     Int
  city       City         @relation(fields: [cityId], references: [id])
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  deletedAt  DateTime?
  greenPlace GreenPlace[]
  event      Event[]
}

model Community {
  id            Int             @id @default(autoincrement())
  name          String
  picId         Int
  pic           User            @relation(fields: [picId], references: [id])
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  deletedAt     DateTime?
  communityUser CommunityUser[]
  basecamp      Basecamp[]
  event         Event[]
}

model CommunityUser {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  communityId Int
  community   Community @relation(fields: [communityId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model GreenPlace {
  id         Int         @id @default(autoincrement())
  name       String
  provinceId Int
  province   Province    @relation(fields: [provinceId], references: [id])
  cityId     Int
  city       City        @relation(fields: [cityId], references: [id])
  districtId Int
  district   District    @relation(fields: [districtId], references: [id])
  address    String
  latitude   String
  longitude  String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  deletedAt  DateTime?
  basecamp   Basecamp[]
  complaint  Complaint[]
}

model Basecamp {
  id           Int        @id @default(autoincrement())
  communityId  Int
  community    Community  @relation(fields: [communityId], references: [id])
  greenPlaceId Int
  greenPlace   GreenPlace @relation(fields: [greenPlaceId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?
}

model Event {
  id          Int        @id @default(autoincrement())
  name        String
  description String     @db.Text
  thumbnail   String
  communityId Int
  community   Community  @relation(fields: [communityId], references: [id])
  provinceId  Int
  province    Province   @relation(fields: [provinceId], references: [id])
  cityId      Int
  city        City       @relation(fields: [cityId], references: [id])
  districtId  Int
  district    District   @relation(fields: [districtId], references: [id])
  placeName   String
  address     String
  latitude    String
  longitude   String
  schedule    DateTime
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?
  ticket      Ticket[]
  donation    Donation[]
  comment     Comment[]
}

model Ticket {
  id        Int       @id @default(autoincrement())
  name      String
  price     Float
  eventId   Int
  event     Event     @relation(fields: [eventId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Donation {
  id             Int       @id @default(autoincrement())
  name           String
  description    String    @db.Text
  startDate      DateTime
  endDate        DateTime
  expectDonation Float
  eventId        Int
  event          Event     @relation(fields: [eventId], references: [id])
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?
}

model Comment {
  id        Int       @id @default(autoincrement())
  message   String    @db.Text
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  eventId   Int
  event     Event     @relation(fields: [eventId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Complaint {
  id           Int        @id @default(autoincrement())
  subject      String
  description  String     @db.Text
  greenPlaceId Int
  greenPlace   GreenPlace @relation(fields: [greenPlaceId], references: [id])
  userId       Int
  user         User       @relation(fields: [userId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?
}
